"""
Structure filter widget for selecting NP structures to include.
"""

from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, QCheckBox, 
    QPushButton, QLabel, QFrame, QScrollArea, QGroupBox
)
from PyQt6.QtCore import pyqtSignal, Qt
from typing import List


class StructureFilterWidget(QWidget):
    """
    Widget for selecting which NP structure types to include in extraction.
    Displays a grid of checkboxes with explanations for each structure type.
    """
    
    # Signal emitted when filter selection changes
    filterChanged = pyqtSignal(list)  # List of selected structure names
    
    def __init__(self, parent=None):
        """
        Initialize the structure filter widget.
        
        Args:
            parent: Parent widget
        """
        super().__init__(parent)
        
        # Define structure types using keys matching the labels from analyzer.py
        self.structure_info = {
            # Keys MUST match the labels generated by ANPEAnalyzer._analyze_structure
            "determiner": "Determiner",
            "adjectival_modifier": "Adjectival Modifier",
            "prepositional_modifier": "Prepositional Modifier",
            "compound": "Compound",
            "possessive": "Possessive",
            "quantified": "Quantified",
            "coordinated": "Coordinated",
            "appositive": "Appositive",
            "relative_clause": "Relative Clause", # Standard relative clause
            "reduced_relative_clause": "Reduced Relative Clause", # Added
            "nonfinite_complement": "Nonfinite Complement",
            "finite_complement": "Finite Complement", # Added
            "pronoun": "Pronoun", # Added (simple pronoun NP)
            "standalone_noun": "Standalone Noun", # Added (simple noun NP)
            "others": "Others" # Added (fallback category)
            # REMOVED: "named_entity" - not generated by current analyzer
        }
        # Use Title Case names for display
        self.structure_display_names = list(self.structure_info.values())
        # Use lowercase keys for internal logic/config
        self.structure_keys = list(self.structure_info.keys())
        
        # Setup UI
        self.setup_ui()
    
    def setup_ui(self):
        """Set up the UI components."""
        # Main layout
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(5, 5, 5, 5) # Reduced margins for compactness
        main_layout.setSpacing(5) # Base spacing

        # 1. Master toggle checkbox
        self.master_checkbox = QCheckBox("Structure Filtering Options")
        self.master_checkbox.setToolTip(
            "Enable to filter noun phrases based on their syntactic structure.\n"
            "When disabled, all extracted noun phrases are kept (subject to other filters)."
        )
        self.master_checkbox.setChecked(False) # Default off
        main_layout.addWidget(self.master_checkbox)
        
        # Add vertical spacing between master checkbox and scroll area
        main_layout.addSpacing(10) 

        # 2. Scroll Area for options
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setFrameShape(QFrame.Shape.NoFrame) # Remove internal frame
        
        # Content widget for the scroll area
        content_widget = QWidget()
        scroll_area.setWidget(content_widget)
        self.grid_widget = content_widget
        
        # Grid layout for checkboxes
        grid_layout = QGridLayout(self.grid_widget)
        grid_layout.setSpacing(10) 

        self.structure_checkboxes = {}
        num_cols = 3 
        
        # Descriptions matching README
        structure_descriptions = {
            "Determiner": "Contains determiners (the, a, an, this, that, these, those)",
            "Adjectival Modifier": "Contains adjective modifiers",
            "Prepositional Modifier": "Prepositional phrase modifiers",
            "Compound": "Compound nouns forming a single conceptual unit",
            "Possessive": "Possessive constructions with markers or pronouns",
            "Quantified": "Quantified NPs with numbers or quantity words",
            "Coordinated": "Coordinated elements joined by conjunctions",
            "Appositive": "One NP renames or explains another",
            "Relative Clause": "Clause that modifies a noun",
            "Reduced Relative Clause": "Reduced form of a relative clause (e.g., participle clause modifying a noun)", # Added description
            "Finite Complement": "Finite clause (often starting with 'that') functioning as a complement", # Added description
            "Nonfinite Complement": "Nonfinite clause (infinitive or gerund) functioning as a complement",
            "Pronoun": "Consists solely of a pronoun", # Added description
            "Standalone Noun": "Consists of a single noun or proper noun", # Added description
            "Others": "Other identified NP structures not matching specific patterns"
        }

        # Use display names for checkbox text, store the corresponding key
        key_description_map = {v: k for k, v in self.structure_info.items()} # Map Display Name -> key

        for i, display_name in enumerate(self.structure_display_names):
            row = i // num_cols
            col = i % num_cols
            
            checkbox = QCheckBox(display_name) # Checkbox text is the user-friendly name
            structure_key = key_description_map[display_name] # Get the internal key
            # Set tooltip using the descriptions dictionary
            tooltip_text = structure_descriptions.get(display_name, f"Filter for {display_name} structures") # Default if desc missing
            checkbox.setToolTip(tooltip_text) 
            self.structure_checkboxes[structure_key] = checkbox # Store checkbox using the key
            grid_layout.addWidget(checkbox, row, col)
            
        # Add the scroll area to the main layout
        main_layout.addWidget(scroll_area)
        
        # Action buttons
        button_widget = QWidget()
        self.button_widget = button_widget
        button_layout = QHBoxLayout(self.button_widget)
        button_layout.setContentsMargins(0, 0, 0, 0)
        button_layout.addStretch()
        self.select_all_button = QPushButton("Select All")
        self.select_all_button.clicked.connect(self.select_all)
        self.clear_selection_button = QPushButton("Clear Selection")
        self.clear_selection_button.clicked.connect(self.clear_selection)
        button_layout.addWidget(self.select_all_button)
        button_layout.addWidget(self.clear_selection_button)
        main_layout.addWidget(self.button_widget)
        
        # Initial state
        self.toggle_filtering_widgets(self.master_checkbox.isChecked())
        # Connect signal AFTER initial state is set
        self.master_checkbox.toggled.connect(self.toggle_filtering_widgets)
    
    def toggle_filtering_widgets(self, enabled):
        """Enable or disable child widgets based on the GroupBox state."""
        self.grid_widget.setEnabled(enabled)
        self.button_widget.setEnabled(enabled)
        # Explicitly enable/disable individual checkboxes within the grid
        for checkbox in self.structure_checkboxes.values():
            checkbox.setEnabled(enabled)
    
    def is_filtering_enabled(self):
        """Check if the master filtering toggle (GroupBox) is checked."""
        return self.master_checkbox.isChecked()
    
    def update_filter(self):
        """Update filter based on checkbox states and emit signal."""
        selected = []
        
        for value, checkbox in self.structure_checkboxes.items():
            if checkbox.isChecked():
                selected.append(value)
        
        self.filterChanged.emit(selected)
    
    def get_selected_structures(self) -> List[str]:
        """Get selected structure keys (lowercase) only if filtering is enabled."""
        if not self.is_filtering_enabled():
            return [] # Return empty list if master toggle is off
            
        selected_keys = []
        for key, checkbox in self.structure_checkboxes.items(): # Iterate through keys
            if checkbox.isChecked():
                selected_keys.append(key) # Append the lowercase key
        return selected_keys
    
    def select_all(self):
        """Select all structure types."""
        for checkbox in self.structure_checkboxes.values():
             checkbox.setChecked(True)
             
    def clear_selection(self):
        """Unselect all structure types."""
        for checkbox in self.structure_checkboxes.values():
             checkbox.setChecked(False)
             
    def set_selected_structures(self, structures: List[str]):
        """Set checkbox states based on a list of structure keys."""
        self.clear_selection() # Start fresh
        for key in structures:
             if key in self.structure_checkboxes: # Check if key exists
                 self.structure_checkboxes[key].setChecked(True) 